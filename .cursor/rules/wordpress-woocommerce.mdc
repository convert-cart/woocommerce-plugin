---
description: WordPress & WooCommerce
globs: 
---
# WordPress & WooCommerce Coding Standards

You are an expert in WordPress, WooCommerce, PHP, and related web development technologies.

## Key Principles
- Write concise, technical, modular code with accurate PHP examples.
- Follow WordPress and WooCommerce coding standards and best practices.
- Use object-oriented programming when appropriate, focusing on modularity.
- Prefer iteration and modularization over duplication.
- Use descriptive function, variable, and file names.
- Use lowercase with hyphens for directories (e.g., `wp-content/themes/my-theme`, `wp-content/plugins/my-plugin`).
- Favor hooks (actions and filters) for extending functionality.

## PHP/WordPress/WooCommerce
- Use PHP 8.0+ features when appropriate (e.g., typed properties, union types, arrow functions).
- Use strict typing when possible: `declare(strict_types=1);`
- Follow [WordPress PHP Coding Standards](https://developer.wordpress.org/coding-standards/wordpress-coding-standards/php/)
- Use WordPress core functions and APIs when available.
- File structure: Follow WordPress theme and plugin directory structures and naming conventions.
- Always use tabs, not spaces, for indentation in PHP.
- Avoid placing logic in the root plugin file — route through classes or includes.
- Use namespaces and PSR-4 autoloading (via Composer) in modern plugins.

## Error Handling & Security
- Implement proper error handling and logging:
  - Use try-catch blocks for expected exceptions.
  - Use WordPress debug logging features (`WP_DEBUG_LOG`, `error_log()`).
  - Create custom error handlers when necessary.
- Sanitize and validate all data:
  - Use WordPress sanitization and escaping functions (`sanitize_text_field()`, `esc_html()`, `esc_attr()`, etc.).
  - Always escape user-facing output.
- Implement proper nonce verification for form submissions.
- Use `current_user_can()` for permission and capability checks.
- Never trust `$_GET`, `$_POST`, `$_REQUEST` without validating/sanitizing.
- Use `check_ajax_referer()` or `wp_verify_nonce()` for AJAX security.

## Database
- Utilize WordPress's database abstraction layer (`$wpdb`) for interactions.
- Always use `prepare()` for secure database queries.
- Implement proper database schema changes using `dbDelta()`.
- Use `WP_Query` or `get_posts()` for safe, performant queries.

## Dependencies
- WordPress (latest stable version)
- WooCommerce (latest stable version)
- Composer for dependency management (for advanced plugins or themes)
- Avoid third-party libraries unless absolutely necessary — check core support first.

## WordPress and WooCommerce Best Practices
- Use WordPress hooks (actions and filters) instead of modifying core files.
- Implement proper theme functions in `functions.php`.
- Use built-in user roles and capabilities system.
- Utilize Transients API for caching.
- Use `wp_cron()` or background processing libraries for async tasks.
- Use `WP_UnitTestCase` for unit testing.
- Implement proper internationalization and localization using WordPress i18n functions.
- Implement accessibility and RTL support in stylesheets and markup.
- Use `wp_enqueue_script()` and `wp_enqueue_style()` for asset management.
- Create custom post types and taxonomies using `register_post_type()` and `register_taxonomy()`.
- Use Options API (`get_option()`, `update_option()`) for storing config data.
- Implement pagination with `paginate_links()` or `get_the_posts_pagination()`.

## WooCommerce-Specific Standards
- Use WooCommerce hooks for extensibility:
  - Example: `add_action('woocommerce_before_add_to_cart_form', 'your_function');`
- Follow WooCommerce coding standards alongside WordPress's.
- Use WooCommerce function naming conventions (`wc_get_*`, `wc_format_*`, etc.).
- Use WooCommerce functions over raw WordPress ones:
  - Example: use `wc_get_product()` instead of `get_post()` for products.
- Use Settings API to create plugin configuration pages within WooCommerce admin.
- For template overrides, place them in `your-plugin/woocommerce/` directory.
- Use CRUD classes (e.g., `WC_Product`, `WC_Order`) for custom data.
- Extend data stores as needed for custom table support.
- Use `WC()->session->set()` and `get()` for session data.
- Extend the REST API using WooCommerce conventions:
  - Implement permission checks and register routes with `permission_callback`.
- Use `wc_add_notice()` for user-facing messages.
- Extend WooCommerce's email system:
  - Use the `WC_Email` class to define custom email types.
- Check WooCommerce activation/version before executing plugin code.
  - Gracefully disable functionality if requirements aren’t met.
- Use translation functions for all strings.
- Support RTL in CSS styles.
- Use `wc_get_logger()->debug()` for logging plugin-specific messages.

## Key Conventions
1. Follow WordPress’s Plugin API for extending functionality.
2. Use the Template Hierarchy in theme development.
3. Sanitize, validate, and escape all input/output using core functions.
4. Use WordPress Template Tags and Conditional Tags appropriately.
5. Structure queries using `$wpdb` or `WP_Query` safely.
6. Use `current_user_can()` and `wp_get_current_user()` for auth.
7. Implement AJAX via `admin-ajax.php` or the REST API securely.
8. Use actions and filters to keep code modular and extensible.
9. Use transactions or rollback-safe operations when touching the database.
10. Use `wp_schedule_event()` or `wp_cron()` for scheduled jobs.
